{
  "name": "Natural number game",
  "version": "1.3.3",
  "data": [
    {
      "lean": "lemma example1 (x y z : mynat) : x * y + z = x * y + z :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "lemma example2 (x y : mynat) (h : y = x + 7) : 2 * y = 2 * (x + 7) :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "lemma example3 (a b : mynat) (h : succ a = b) : succ(succ(a)) = succ(b) :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "lemma add_succ_zero (a : mynat) : a + succ(0) = succ(a) :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "lemma zero_add (n : mynat) : 0 + n = n :=\n",
      "isSolved": true,
      "editorText": "induction n with d hd,\r\nrw add_zero,\r\nrefl,\r\nrw add_succ,\r\nrw hd,\r\nrefl,"
    },
    {
      "lean": "lemma add_assoc (a b c : mynat) : (a + b) + c = a + (b + c) :=\n",
      "isSolved": true,
      "editorText": "induction c with n hn,\r\nrw add_zero,\r\nrw add_zero,\r\nrefl,\r\nrw add_succ b n,\r\nrw add_succ,\r\nrw hn,\r\nrw ← add_succ,\r\nrefl,"
    },
    {
      "lean": "lemma succ_add (a b : mynat) : succ a + b = succ (a + b) :=\n",
      "isSolved": true,
      "editorText": "induction b with n hn,\r\nrw add_zero,\r\nrw add_zero,\r\nrefl,\r\nrw add_succ,\r\nrw hn,\r\nrw ← add_succ,\r\nrefl,"
    },
    {
      "lean": "lemma add_comm (a b : mynat) : a + b = b + a :=\n",
      "isSolved": true,
      "editorText": "induction b with n hn,\r\nrw add_zero,\r\nrw zero_add,\r\nrefl,\r\nrw add_succ,\r\nrw hn,\r\nrw ← succ_add,\r\nrefl,"
    },
    {
      "lean": "theorem succ_eq_add_one (n : mynat) : succ n = n + 1 :=\n",
      "isSolved": true,
      "editorText": "rw one_eq_succ_zero,\r\nrw add_succ,\r\nrw add_zero,\r\nrefl,"
    },
    {
      "lean": "lemma add_right_comm (a b c : mynat) : a + b + c = a + c + b :=\n",
      "isSolved": true,
      "editorText": "rw add_assoc,\r\nrw add_comm b c,\r\nrw ← add_assoc,\r\nrefl,"
    },
    {
      "lean": "lemma zero_mul (m : mynat) : 0 * m = 0 :=\n",
      "isSolved": true,
      "editorText": "induction m with d hd,\r\nrw mul_zero,\r\nrefl,\r\nrw mul_succ,\r\nrw add_zero,\r\nrw hd,\r\nrefl,"
    },
    {
      "lean": "lemma mul_one (m : mynat) : m * 1 = m :=\n",
      "isSolved": true,
      "editorText": "rw one_eq_succ_zero,\r\nrw mul_succ,\r\nrw mul_zero,\r\nrw zero_add,\r\nrefl,"
    },
    {
      "lean": "lemma one_mul (m : mynat) : 1 * m = m :=\n",
      "isSolved": true,
      "editorText": "induction m with b ab,\r\nrw mul_zero,\r\nrefl,\r\nrw mul_succ,\r\nrw ab,\r\nrw succ_eq_add_one,\r\nrefl,"
    },
    {
      "lean": "lemma mul_add (t a b : mynat) : t * (a + b) = t * a + t * b :=\n",
      "isSolved": true,
      "editorText": "induction b with j jk,\r\nrw add_zero,\r\nrw mul_zero,\r\nrw add_zero,\r\nrefl,\r\nrw add_succ,\r\nrw mul_succ,\r\nrw jk,\r\nrw add_assoc,\r\nrw mul_succ,\r\nrefl,"
    },
    {
      "lean": "lemma mul_assoc (a b c : mynat) : (a * b) * c = a * (b * c) :=\n",
      "isSolved": true,
      "editorText": "induction c with a ab,\r\nrw mul_zero,\r\nrw mul_zero,\r\nrw mul_zero,\r\nrefl,\r\nrw mul_succ,\r\nrw ab,\r\nrw mul_succ,\r\nrw mul_add,\r\nrefl,"
    },
    {
      "lean": "lemma succ_mul (a b : mynat) : succ a * b = a * b + b :=\n",
      "isSolved": true,
      "editorText": "induction b with c cd,\r\nrw mul_zero,\r\nrw add_zero,\r\nrw mul_zero,\r\nrefl,\r\nrw mul_succ,\r\nrw cd,\r\nrw add_right_comm,\r\nrw add_succ,\r\nrw add_comm,\r\nrw mul_succ,\r\nrw add_succ,\r\nrw add_comm,\r\nrw add_succ,\r\nrefl,"
    },
    {
      "lean": "lemma add_mul (a b t : mynat) : (a + b) * t = a * t + b * t :=\n",
      "isSolved": true,
      "editorText": "induction t with n mn,\r\nrw mul_zero,\r\nrw mul_zero,\r\nrw mul_zero,\r\nrw add_zero,\r\nrefl,\r\nrw mul_succ,\r\nrw mn,\r\nrw add_assoc,\r\nrw add_comm a b,\r\nrw ← add_assoc (b * n) b a,\r\nrw ← mul_succ,\r\nrw add_comm (b * succ n),\r\nrw ← add_assoc,\r\nrw ← mul_succ,\r\nrefl,"
    },
    {
      "lean": "lemma mul_comm (a b : mynat) : a * b = b * a :=\n",
      "isSolved": true,
      "editorText": "induction b with c cd,\r\nrw mul_zero,\r\nrw zero_mul,\r\nrefl,\r\nrw mul_succ,\r\nrw succ_mul,\r\nrw cd,\r\nrefl,"
    },
    {
      "lean": "lemma mul_left_comm (a b c : mynat) : a * (b * c) = b * (a * c) :=\n",
      "isSolved": true,
      "editorText": "rw ← mul_assoc,\r\nrw mul_comm a b,\r\nrw mul_assoc,\r\nrefl,"
    },
    {
      "lean": "lemma zero_pow_zero : (0 : mynat) ^ (0 : mynat) = 1 :=\n",
      "isSolved": true,
      "editorText": "rw pow_zero,\r\nrefl,"
    },
    {
      "lean": "lemma zero_pow_succ (m : mynat) : (0 : mynat) ^ (succ m) = 0 :=\n",
      "isSolved": true,
      "editorText": "rw pow_succ,\r\nrw mul_zero,\r\nrefl,"
    },
    {
      "lean": "lemma pow_one (a : mynat) : a ^ (1 : mynat) = a :=\n",
      "isSolved": true,
      "editorText": "rw one_eq_succ_zero,\r\nrw pow_succ,\r\nrw pow_zero,\r\nrw one_mul,\r\nrefl,"
    },
    {
      "lean": "lemma one_pow (m : mynat) : (1 : mynat) ^ m = 1 :=\n",
      "isSolved": true,
      "editorText": "induction m with a ab,\r\nrw pow_zero,\r\nrefl,\r\nrw pow_succ,\r\nrw mul_one,\r\nrw ab,\r\nrefl,"
    },
    {
      "lean": "lemma pow_add (a m n : mynat) : a ^ (m + n) = a ^ m * a ^ n :=\n",
      "isSolved": true,
      "editorText": "induction n with b bc,\r\nrw add_zero,\r\nrw pow_zero,\r\nrw mul_one,\r\nrefl,\r\nrw add_succ,\r\nrw pow_succ,\r\nrw bc,\r\nrw mul_assoc,\r\nrw pow_succ,\r\nrefl,"
    },
    {
      "lean": "lemma mul_pow (a b n : mynat) : (a * b) ^ n = a ^ n * b ^ n :=\n",
      "isSolved": true,
      "editorText": "induction n with x xy,\r\nrw pow_zero,\r\nrw pow_zero,\r\nrw pow_zero,\r\nrw one_mul,\r\nrefl,\r\nrw pow_succ,\r\nrw xy,\r\nrw ← mul_left_comm,\r\nrw mul_assoc,\r\nrw ← pow_succ,\r\nrw ← mul_assoc,\r\nrw mul_comm a,\r\nrw ← pow_succ,\r\nrefl,"
    },
    {
      "lean": "lemma pow_pow (a m n : mynat) : (a ^ m) ^ n = a ^ (m * n) :=\n",
      "isSolved": true,
      "editorText": "induction n with x xy,\r\nrw pow_zero,\r\nrw mul_zero,\r\nrw pow_zero,\r\nrefl,\r\nrw pow_succ,\r\nrw xy,\r\nrw ← pow_add,\r\nrw mul_succ,\r\nrefl,"
    },
    {
      "lean": "lemma add_squared (a b : mynat) :\n  (a + b) ^ (2 : mynat) = a ^ (2 : mynat) + b ^ (2 : mynat) + 2 * a * b :=\n",
      "isSolved": true,
      "editorText": "rw two_eq_succ_one,\r\nrw one_eq_succ_zero,\r\nrw pow_succ,\r\nrw pow_succ,\r\nrw pow_succ,\r\nrw pow_succ,\r\nrw pow_succ,\r\nrw pow_succ,\r\nrw pow_zero,\r\nrw pow_zero,\r\nrw pow_zero,\r\nrw one_mul,\r\nrw one_mul,\r\nrw one_mul,\r\nrw add_assoc,\r\nrw add_comm (b * b),\r\nrw ← add_assoc,\r\nrw mul_comm (succ (succ 0)),\r\nrw mul_assoc,\r\nrw mul_comm (succ (succ 0)),\r\nrw mul_succ,\r\nrw ← one_eq_succ_zero,\r\nrw mul_one,\r\nrw add_mul,\r\nrw mul_add,\r\nrw mul_add,\r\nrw mul_comm b a,\r\nrw ← add_assoc,\r\nrw add_assoc (a*a) (a*b) (a * b),\r\nrw ← mul_add a b b,\r\nrefl,"
    },
    {
      "lean": "example (P Q : Type) (p : P) (h : P → Q) : Q :=\n",
      "isSolved": true,
      "editorText": "exact h(p),"
    },
    {
      "lean": "example : mynat → mynat :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\nexact h,"
    },
    {
      "lean": "example (P Q R S T U: Type)\n(p : P)\n(h : P → Q)\n(i : Q → R)\n(j : Q → T)\n(k : S → T)\n(l : T → U)\n: U :=\n",
      "isSolved": true,
      "editorText": "have q := h p,\r\nhave t := j q,\r\nhave u:= l t,\r\nexact u,"
    },
    {
      "lean": "example (P Q R S T U: Type)\n(p : P)\n(h : P → Q)\n(i : Q → R)\n(j : Q → T)\n(k : S → T)\n(l : T → U)\n: U :=\n",
      "isSolved": true,
      "editorText": "have q := h p,\r\nhave t := j q,\r\nhave u:= l t,\r\nexact u,"
    },
    {
      "lean": "example (P Q : Type) : P → (Q → P) :=\n",
      "isSolved": true,
      "editorText": "intro p,\r\nintro q,\r\nexact p,"
    },
    {
      "lean": "example (P Q R : Type) : (P → (Q → R)) → ((P → Q) → (P → R)) :=\n",
      "isSolved": true,
      "editorText": "intro p_q_r,\r\nintro p_q,\r\nintro p,\r\nhave q := p_q p,\r\nhave r := p_q_r p q,\r\nexact r,"
    },
    {
      "lean": "example (P Q F : Type) : (P → Q) → ((Q → F) → (P → F)) :=\n",
      "isSolved": true,
      "editorText": "intro p_q,\r\nintro q_f,\r\nintro p,\r\napply q_f,\r\napply p_q,\r\nexact p,"
    },
    {
      "lean": "example (P Q : Type) : (P → Q) → ((Q → empty) → (P → empty)) :=\n",
      "isSolved": true,
      "editorText": "intro p_q,\r\nintro q_emp,\r\nintro p,\r\nhave q := p_q p,\r\napply q_emp,\r\nexact q,"
    },
    {
      "lean": "example (A B C D E F G H I J K L : Type)\n(f1 : A → B) (f2 : B → E) (f3 : E → D) (f4 : D → A) (f5 : E → F)\n(f6 : F → C) (f7 : B → C) (f8 : F → G) (f9 : G → J) (f10 : I → J)\n(f11 : J → I) (f12 : I → H) (f13 : E → H) (f14 : H → K) (f15 : I → L)\n : A → L :=\n",
      "isSolved": true,
      "editorText": "intro a,\r\napply f15,\r\napply f11,\r\napply f9,\r\napply f8,\r\napply f5,\r\napply f2,\r\napply f1,\r\nexact a,"
    },
    {
      "lean": "example (P Q : Prop) (p : P) (h : P → Q) : Q :=\n",
      "isSolved": true,
      "editorText": "have q := h p,\r\nexact h(p),"
    },
    {
      "lean": "lemma imp_self (P : Prop) : P → P :=\n",
      "isSolved": true,
      "editorText": "intro p,\r\nexact p,"
    },
    {
      "lean": "lemma maze (P Q R S T U: Prop)\n(p : P)\n(h : P → Q)\n(i : Q → R)\n(j : Q → T)\n(k : S → T)\n(l : T → U)\n: U :=\n",
      "isSolved": true,
      "editorText": "have q := h p,\r\nhave t := j q,\r\nhave u := l t,\r\nexact u,"
    },
    {
      "lean": "lemma maze (P Q R S T U: Prop)\n(p : P)\n(h : P → Q)\n(i : Q → R)\n(j : Q → T)\n(k : S → T)\n(l : T → U)\n: U :=\n",
      "isSolved": true,
      "editorText": "have q := h p,\r\nhave t := j q,\r\nhave u := l t,\r\nexact u,"
    },
    {
      "lean": "example (P Q : Prop) : P → (Q → P) :=\n",
      "isSolved": true,
      "editorText": "intro p,\r\nintro q,\r\nexact p,"
    },
    {
      "lean": "example (P Q R : Prop) : (P → (Q → R)) → ((P → Q) → (P → R)) :=\n",
      "isSolved": true,
      "editorText": "intro p_q_r,\r\nintro p_q,\r\nintro p,\r\napply p_q_r,\r\nexact p,\r\napply p_q,\r\nexact p,"
    },
    {
      "lean": "lemma imp_trans (P Q R : Prop) : (P → Q) → ((Q → R) → (P → R)) :=\n",
      "isSolved": true,
      "editorText": "intro p_q,\r\nintro q_r,\r\nintro p,\r\nhave q := p_q p,\r\nhave r := q_r q,\r\nexact r,"
    },
    {
      "lean": "lemma contrapositive (P Q : Prop) : (P → Q) → (¬ Q → ¬ P) :=\n",
      "isSolved": true,
      "editorText": "rw not_iff_imp_false,\r\nintro p_q,\r\nintro q_fal,\r\nintro p,\r\napply q_fal,\r\napply p_q,\r\nexact p,"
    },
    {
      "lean": "example (A B C D E F G H I J K L : Prop)\n(f1 : A → B) (f2 : B → E) (f3 : E → D) (f4 : D → A) (f5 : E → F)\n(f6 : F → C) (f7 : B → C) (f8 : F → G) (f9 : G → J) (f10 : I → J)\n(f11 : J → I) (f12 : I → H) (f13 : E → H) (f14 : H → K) (f15 : I → L)\n : A → L :=\n",
      "isSolved": true,
      "editorText": "intro a,\r\napply f15,\r\napply f11,\r\napply f9,\r\napply f8,\r\napply f5,\r\napply f2,\r\napply f1,\r\nexact a,"
    },
    {
      "lean": "example (P Q : Prop) (p : P) (q : Q) : P ∧ Q :=\n",
      "isSolved": true,
      "editorText": "split,\r\nexact p,\r\nexact q,"
    },
    {
      "lean": "lemma and_symm (P Q : Prop) : P ∧ Q → Q ∧ P :=\n",
      "isSolved": true,
      "editorText": "intro pq,\r\ncases pq,\r\nsplit,\r\nexact pq_right,\r\nexact pq_left,"
    },
    {
      "lean": "lemma and_trans (P Q R : Prop) : P ∧ Q → Q ∧ R → P ∧ R :=\n",
      "isSolved": true,
      "editorText": "intro pq,\r\nintro qr,\r\ncases pq,\r\ncases qr,\r\nsplit,\r\nexact pq_left,\r\nexact qr_right,"
    },
    {
      "lean": "lemma iff_trans (P Q R : Prop) : (P ↔ Q) → (Q ↔ R) → (P ↔ R) :=\n",
      "isSolved": true,
      "editorText": "intro pq,\r\nintro qr,\r\ncases pq,\r\ncases qr,\r\nsplit,\r\nintro p,\r\nhave q := pq_mp p,\r\nhave r := qr_mp q,\r\nexact r,\r\nintro r,\r\nhave q := qr_mpr r,\r\nhave p := pq_mpr q,\r\nexact p,"
    },
    {
      "lean": "lemma iff_trans (P Q R : Prop) : (P ↔ Q) → (Q ↔ R) → (P ↔ R) :=\n",
      "isSolved": true,
      "editorText": "intro pq,\r\nintro qr,\r\ncases pq,\r\ncases qr,\r\nsplit,\r\nintro p,\r\nhave q := pq_mp p,\r\nhave r := qr_mp q,\r\nexact r,\r\nintro r,\r\nhave q := qr_mpr r,\r\nhave p := pq_mpr q,\r\nexact p,"
    },
    {
      "lean": "example (P Q : Prop) : Q → (P ∨ Q) :=\n",
      "isSolved": true,
      "editorText": "intro q,\r\nright,\r\nexact q,"
    },
    {
      "lean": "lemma or_symm (P Q : Prop) : P ∨ Q → Q ∨ P :=\n",
      "isSolved": true,
      "editorText": "intro pq,\r\ncases pq,\r\nright,\r\nexact pq,\r\nleft,\r\nexact pq,"
    },
    {
      "lean": "lemma and_or_distrib_left (P Q R : Prop) : P ∧ (Q ∨ R) ↔ (P ∧ Q) ∨ (P ∧ R) :=\n",
      "isSolved": true,
      "editorText": "split,\r\nintro p_qr,\r\ncases p_qr,\r\ncases p_qr_right with q r,\r\nleft,\r\nsplit,\r\nexact p_qr_left,\r\nexact q,\r\nright,\r\nsplit, \r\nexact p_qr_left,\r\nexact r,\r\nintro pq_pr,\r\ncases pq_pr with pq pr,\r\ncases pq,\r\nsplit,\r\nexact pq_left,\r\nleft,\r\nexact pq_right,\r\ncases pr,\r\nsplit,\r\nexact pr_left,\r\nright,\r\nexact pr_right,"
    },
    {
      "lean": "lemma contra (P Q : Prop) : (P ∧ ¬ P) → Q :=\n",
      "isSolved": true,
      "editorText": "rw not_iff_imp_false,\r\nintro p_np,\r\ncases p_np,\r\nhave false := p_np_right p_np_left,\r\nexfalso,\r\nexact false,"
    },
    {
      "lean": "lemma contrapositive2 (P Q : Prop) : (¬ Q → ¬ P) → (P → Q) :=\n",
      "isSolved": true,
      "editorText": "intro nq_np,\r\nintro p,\r\nby_cases q : Q,\r\nexact q,\r\nrepeat {rw not_iff_imp_false at h},\r\nrw not_iff_imp_false at q,\r\nhave false := nq_np q p,\r\nexfalso,\r\nexact false,"
    },
    {
      "lean": "theorem succ_inj' {a b : mynat} (hs : succ(a) = succ(b)) :  a = b := \n",
      "isSolved": true,
      "editorText": "have a := succ_inj hs,\r\nexact a,"
    },
    {
      "lean": "theorem succ_succ_inj {a b : mynat} (h : succ(succ(a)) = succ(succ(b))) :  a = b := \n",
      "isSolved": true,
      "editorText": "have suca_b := succ_inj h,\r\nhave a_b := succ_inj suca_b,\r\nexact a_b,"
    },
    {
      "lean": "theorem succ_eq_succ_of_eq {a b : mynat} : a = b → succ(a) = succ(b) :=\n",
      "isSolved": true,
      "editorText": "intro c,\r\nrw c,\r\nrefl,"
    },
    {
      "lean": "theorem succ_eq_succ_iff (a b : mynat) : succ a = succ b ↔ a = b :=\n",
      "isSolved": true,
      "editorText": "split,\r\nexact succ_inj,\r\nexact succ_eq_succ_of_eq,"
    },
    {
      "lean": "theorem add_right_cancel (a t b : mynat) : a + t = b + t → a = b :=\n",
      "isSolved": true,
      "editorText": "intro at_bt,\r\ninduction t with n mn,\r\nrw add_zero at at_bt,\r\nrw add_zero at at_bt,\r\nexact at_bt,\r\nrw add_succ at at_bt,\r\nrw add_succ at at_bt,\r\nhave s := succ_inj at_bt,\r\nhave x := mn s,\r\nexact x,"
    },
    {
      "lean": "theorem add_left_cancel (t a b : mynat) : t + a = t + b → a = b :=\n",
      "isSolved": true,
      "editorText": "rw add_comm,\r\nrw add_comm t b,\r\nexact add_right_cancel _ _ _,"
    },
    {
      "lean": "theorem add_right_cancel_iff (t a b : mynat) :  a + t = b + t ↔ a = b :=\n",
      "isSolved": true,
      "editorText": "split,\r\nexact add_right_cancel _ _ _,\r\nintro ab,\r\nrw ab,\r\nrefl,"
    },
    {
      "lean": "lemma eq_zero_of_add_right_eq_self {a b : mynat} : a + b = a → b = 0 :=\n",
      "isSolved": true,
      "editorText": "rw ← add_zero a,\r\nrw add_assoc,\r\nrw zero_add,\r\nexact add_left_cancel _ _ _,"
    },
    {
      "lean": "theorem succ_ne_zero (a : mynat) : succ a ≠ 0 := \n",
      "isSolved": true,
      "editorText": "symmetry,\r\nexact zero_ne_succ a,"
    },
    {
      "lean": "lemma add_left_eq_zero {{a b : mynat}} (H : a + b = 0) : b = 0 :=\n",
      "isSolved": true,
      "editorText": "cases b with c,\r\nrefl,\r\nrw add_succ at H,\r\nexfalso,\r\nhave false := succ_ne_zero (a + c) H,\r\nexact false,"
    },
    {
      "lean": "lemma add_right_eq_zero {a b : mynat} : a + b = 0 → a = 0 :=\n",
      "isSolved": true,
      "editorText": "rw add_comm,\r\nintro ba,\r\nhave az := add_left_eq_zero ba,\r\nexact az,"
    },
    {
      "lean": "theorem add_one_eq_succ (d : mynat) : d + 1 = succ d :=\n",
      "isSolved": true,
      "editorText": "symmetry,\r\nrw succ_eq_add_one,\r\nrefl,"
    },
    {
      "lean": "lemma ne_succ_self (n : mynat) : n ≠ succ n :=\n",
      "isSolved": true,
      "editorText": "rw ← add_zero n,\r\nrw ← add_succ,\r\nintro nsucn,\r\nhave false_nsuc := add_left_cancel n _ _ nsucn,\r\nhave f := zero_ne_succ _ false_nsuc,\r\nexact f,"
    },
    {
      "lean": "theorem mul_pos (a b : mynat) : a ≠ 0 → b ≠ 0 → a * b ≠ 0 :=\n",
      "isSolved": true,
      "editorText": "intro c,\r\nintro d,\r\nintro naxb,\r\ncases b with b1,\r\nhave f := d naxb,\r\nexact f,\r\nrw mul_succ at naxb,\r\nhave az := add_left_eq_zero naxb,\r\nhave f := c az,\r\nexact f,"
    },
    {
      "lean": "theorem eq_zero_or_eq_zero_of_mul_eq_zero (a b : mynat) (h : a * b = 0) :\n  a = 0 ∨ b = 0 :=\n",
      "isSolved": true,
      "editorText": "cases b with b1,\r\nright,\r\nrefl,\r\nrw mul_succ at h,\r\nhave az := add_left_eq_zero h,\r\nleft,\r\nexact az,"
    },
    {
      "lean": "theorem mul_eq_zero_iff (a b : mynat): a * b = 0 ↔ a = 0 ∨ b = 0 :=\n",
      "isSolved": true,
      "editorText": "split,\r\nexact eq_zero_or_eq_zero_of_mul_eq_zero _ _,\r\nintro axbz,\r\ncases axbz,\r\nrw axbz,\r\nrw zero_mul,\r\nrefl,\r\nrw axbz,\r\nrw mul_zero,\r\nrefl,"
    },
    {
      "lean": "theorem mul_left_cancel (a b c : mynat) (ha : a ≠ 0) : a * b = a * c → b = c :=\n",
      "isSolved": true,
      "editorText": "induction c with d bd generalizing b,\r\nrw mul_zero,\r\nintro h,\r\nhave aubz := eq_zero_or_eq_zero_of_mul_eq_zero a b h,\r\ncases aubz,\r\nexfalso,\r\nhave f := ha aubz,\r\nexact f,\r\nexact aubz,\r\nintro axbs,\r\ncases b,\r\nrw mul_zero at axbs,\r\nsymmetry at axbs,\r\nrw mul_eq_zero_iff at axbs,\r\ncases axbs,\r\nexfalso,\r\nexact ha axbs,\r\nhave false := succ_ne_zero _ axbs,\r\nexfalso,\r\nexact false,\r\nrepeat {rw mul_succ at axbs},\r\napply succ_eq_succ_of_eq,\r\nhave axbd := add_right_cancel _ _ _ axbs,\r\nhave bed := bd _ axbd,\r\nexact bed,"
    },
    {
      "lean": "lemma one_add_le_self (x : mynat) : x ≤ 1 + x :=\n",
      "isSolved": true,
      "editorText": "rw le_iff_exists_add,\r\nuse 1,\r\nrw add_comm,"
    },
    {
      "lean": "lemma le_refl (x : mynat) : x ≤ x :=\n",
      "isSolved": true,
      "editorText": "rw le_iff_exists_add,\r\nuse 0,\r\nrwa add_zero,"
    },
    {
      "lean": "theorem le_succ (a b : mynat) : a ≤ b → a ≤ (succ b) :=\n",
      "isSolved": true,
      "editorText": "intro aleqb,\r\nrw le_iff_exists_add at aleqb,\r\ncases aleqb with c bac,\r\nrw bac,\r\nuse succ c,\r\nrw add_succ,\r\nrefl,"
    },
    {
      "lean": "lemma zero_le (a : mynat) : 0 ≤ a :=\n",
      "isSolved": true,
      "editorText": "cases a with a1,\r\nexact le_refl 0,\r\nrw le_iff_exists_add,\r\nuse succ a1,\r\nrw zero_add,\r\nrefl,"
    },
    {
      "lean": "theorem le_trans (a b c : mynat) (hab : a ≤ b) (hbc : b ≤ c) : a ≤ c :=\n",
      "isSolved": true,
      "editorText": "rw le_iff_exists_add at hab,\r\nrw le_iff_exists_add at hbc,\r\ncases hab with k bak,\r\ncases hbc with t cbt,\r\nrw cbt,\r\nrw bak,\r\nrw le_iff_exists_add,\r\nuse k + t,\r\nrwa add_assoc,"
    },
    {
      "lean": "theorem le_antisymm (a b : mynat) (hab : a ≤ b) (hba : b ≤ a) : a = b :=\n",
      "isSolved": true,
      "editorText": "rw le_iff_exists_add at hab,\r\nrw le_iff_exists_add at hba,\r\ncases hab with d bad,\r\ncases hba with n abn,\r\nrw abn at bad,\r\nrw add_assoc at bad,\r\nsymmetry at bad,\r\nhave h := eq_zero_of_add_right_eq_self bad,\r\nhave abn_zero := add_right_eq_zero h,\r\nrw abn,\r\nrw abn_zero,\r\nrwa add_zero,"
    },
    {
      "lean": "lemma le_zero (a : mynat) (h : a ≤ 0) : a = 0 :=\n",
      "isSolved": true,
      "editorText": "rw le_iff_exists_add at h,\r\ncases h with i hi,\r\nsymmetry at hi,\r\nhave hz := add_right_eq_zero hi,\r\nexact hz,"
    },
    {
      "lean": "lemma succ_le_succ (a b : mynat) (h : a ≤ b) : succ a ≤ succ b :=\n",
      "isSolved": true,
      "editorText": "rw le_iff_exists_add at h,\r\ncases h with d bad,\r\nrw bad,\r\nrw le_iff_exists_add,\r\nuse d,\r\nrw succ_add,\r\nrefl,"
    },
    {
      "lean": "theorem le_total (a b : mynat) : a ≤ b ∨ b ≤ a :=\n",
      "isSolved": true,
      "editorText": "induction b with c ac,\r\nright,\r\nexact zero_le a,\r\ncases ac,\r\nleft,\r\nhave asuc_c := le_succ _ _ ac,\r\nexact asuc_c,\r\nrw le_iff_exists_add at ac,\r\ncases ac with d acd,\r\ncases d with d1,\r\nrw add_zero at acd,\r\nleft,\r\nuse succ 0,\r\nrw add_succ,\r\nrw add_zero,\r\nrw acd,\r\nrefl,\r\nright,\r\nrw acd,\r\nuse d1,\r\nrw add_succ,\r\nrw ← succ_add,\r\nrefl,"
    },
    {
      "lean": "lemma le_succ_self (a : mynat) : a ≤ succ a :=\n",
      "isSolved": true,
      "editorText": "apply le_succ,\r\nexact le_refl a,"
    },
    {
      "lean": "theorem add_le_add_right {a b : mynat} : a ≤ b → ∀ t, (a + t) ≤ (b + t) :=\n",
      "isSolved": true,
      "editorText": "intro aleqb,\r\nintro t,\r\ncases aleqb with c bac,\r\nrw bac,\r\nuse c,\r\nrw ← add_right_comm,\r\nrefl,"
    },
    {
      "lean": "theorem le_of_succ_le_succ (a b : mynat) : succ a ≤ succ b → a ≤ b :=\n",
      "isSolved": true,
      "editorText": "intro sasb,\r\ncases sasb with c sc,\r\nrw succ_add at sc,\r\nhave bac := succ_inj sc,\r\nuse c,\r\nexact bac,"
    },
    {
      "lean": "theorem not_succ_le_self (a : mynat) : ¬ (succ a ≤ a) :=\n",
      "isSolved": true,
      "editorText": "intro sucaa,\r\ncases sucaa with b suab,\r\ncases b with b1,\r\nrw succ_add at suab,\r\nrw add_zero at suab,\r\nhave f := ne_succ_self _ suab,\r\nexact f,\r\nrw succ_add at suab,\r\nrw ← add_succ at suab,\r\nsymmetry at suab,\r\nhave ssb1z := eq_zero_of_add_right_eq_self suab,\r\nhave f := succ_ne_zero _ ssb1z,\r\nexact f,"
    },
    {
      "lean": "theorem add_le_add_left {a b : mynat} (h : a ≤ b) (t : mynat) :\n  t + a ≤ t + b :=\n",
      "isSolved": true,
      "editorText": "rw add_comm,\r\nrw add_comm t b,\r\nrevert t,\r\nhave atbt := add_le_add_right h,\r\nexact atbt,"
    },
    {
      "lean": "lemma lt_aux_one (a b : mynat) : a ≤ b ∧ ¬ (b ≤ a) → succ a ≤ b :=\n",
      "isSolved": true,
      "editorText": "intro abnba,\r\ncases abnba with ab nba,\r\ncases ab with c bac,\r\ncases c with c1,\r\nexfalso,\r\napply nba,\r\nrw bac,\r\nrw add_zero,\r\nexact le_refl a,\r\nrw add_succ at bac,\r\nuse c1,\r\nrw succ_add,\r\nrw ← bac,\r\nrefl,"
    },
    {
      "lean": "lemma lt_aux_two (a b : mynat) : succ a ≤ b → a ≤ b ∧ ¬ (b ≤ a) :=\n",
      "isSolved": true,
      "editorText": "intro suab,\r\nsplit,\r\nhave asuca := le_succ_self a,\r\nhave hab := le_trans _ _ _ asuca suab,\r\nexact hab,\r\nintro ba,\r\nhave suca := le_trans _ _ _ suab ba,\r\nhave f := not_succ_le_self _ suca,\r\nexact f,"
    },
    {
      "lean": "lemma lt_iff_succ_le (a b : mynat) : a < b ↔ succ a ≤ b :=\n",
      "isSolved": true,
      "editorText": "split,\r\nintro alb,\r\nhave suca_b := lt_aux_one _ _ alb,\r\nexact suca_b,\r\nintro alb,\r\nhave abnb := lt_aux_two _ _ alb,\r\nexact abnb,"
    }
  ]
}